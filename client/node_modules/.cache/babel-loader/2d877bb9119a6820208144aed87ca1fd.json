{"ast":null,"code":"var _jsxFileName = \"/Users/Angelota/Library/Mobile Documents/com~apple~CloudDocs/Desktop/UCM/TFG INFOR/github/aux/TFG-Plataforma-blockchain-para-visualizar-la-reputacion-de-empresas-sobre-casos-de-discriminacion/client/src/contextProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport * as constants from './constantFile.js';\nimport Web3 from 'web3';\nimport { ethers } from \"ethers\";\nimport complaintContract from './complaintContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const context = /*#__PURE__*/React.createContext({});\n\nconst Provider = props => {\n  _s();\n\n  var [user, setUser] = useState(null);\n  var [balance, setBalance] = useState(null);\n  var [companies, setCompanies] = useState([]); //Si todavia no se ha conectado con Metamask entonces aparece un popup para la conexion\n\n  const infuraUrl = constants.INFURA_URL; //Crea una instancia para comunicarse con el nodo indicado\n\n  const web3 = new Web3(new Web3.providers.HttpProvider(infuraUrl)); //Nos conectamos con el contrato\n\n  const contract = new web3.eth.Contract(complaintContract.abi, constants.CONTRACT_ADDRESS);\n  const provider = ethers.getDefaultProvider(\"rinkeby\");\n  useEffect(async () => {\n    await Promise.all([axios.get(`${constants.SERVER_URL}/getuser`, {\n      withCredentials: true\n    }).then(response => {\n      setUser(response.data);\n    }), provider.getBalance(constants.ADDRESS2).then(response => {\n      setBalance(ethers.utils.formatEther(response));\n    })]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: {\n      \"user\": user,\n      \"web3\": web3,\n      \"contract\": contract,\n      \"balance\": balance\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Provider, \"0jYx7qHeyO3Fik2nh0m6c5HYkZE=\");\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/Angelota/Library/Mobile Documents/com~apple~CloudDocs/Desktop/UCM/TFG INFOR/github/aux/TFG-Plataforma-blockchain-para-visualizar-la-reputacion-de-empresas-sobre-casos-de-discriminacion/client/src/contextProvider.js"],"names":["React","useEffect","useState","axios","constants","Web3","ethers","complaintContract","context","createContext","Provider","props","user","setUser","balance","setBalance","companies","setCompanies","infuraUrl","INFURA_URL","web3","providers","HttpProvider","contract","eth","Contract","abi","CONTRACT_ADDRESS","provider","getDefaultProvider","Promise","all","get","SERVER_URL","withCredentials","then","response","data","getBalance","ADDRESS2","utils","formatEther","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,iBAAP,MAA8B,0BAA9B;;AAEA,OAAO,MAAMC,OAAO,gBAAGR,KAAK,CAACS,aAAN,CAAoB,EAApB,CAAhB;;AAIP,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAExB,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAA9B;AACA,MAAI,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAApC;AACA,MAAI,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAAxC,CAJwB,CAMxB;;AACA,QAAMgB,SAAS,GAAGd,SAAS,CAACe,UAA5B,CAPwB,CAQxB;;AACA,QAAMC,IAAI,GAAG,IAAIf,IAAJ,CAAS,IAAIA,IAAI,CAACgB,SAAL,CAAeC,YAAnB,CAAgCJ,SAAhC,CAAT,CAAb,CATwB,CAUxB;;AACA,QAAMK,QAAQ,GAAG,IAAIH,IAAI,CAACI,GAAL,CAASC,QAAb,CAAsBlB,iBAAiB,CAACmB,GAAxC,EAA6CtB,SAAS,CAACuB,gBAAvD,CAAjB;AACA,QAAMC,QAAQ,GAAGtB,MAAM,CAACuB,kBAAP,CAA0B,SAA1B,CAAjB;AAEA5B,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAM6B,OAAO,CAACC,GAAR,CAAY,CACd5B,KAAK,CAAC6B,GAAN,CAAW,GAAE5B,SAAS,CAAC6B,UAAW,UAAlC,EAA6C;AAAEC,MAAAA,eAAe,EAAG;AAApB,KAA7C,EACKC,IADL,CACWC,QAAD,IAAc;AAAGvB,MAAAA,OAAO,CAACuB,QAAQ,CAACC,IAAV,CAAP;AAAwB,KADnD,CADc,EAGdT,QAAQ,CAACU,UAAT,CAAoBlC,SAAS,CAACmC,QAA9B,EACKJ,IADL,CACWC,QAAD,IAAc;AAAErB,MAAAA,UAAU,CAACT,MAAM,CAACkC,KAAP,CAAaC,WAAb,CAAyBL,QAAzB,CAAD,CAAV;AAA+C,KADzE,CAHc,CAAZ,CAAN;AAIiF,GAL5E,EAK8E,EAL9E,CAAT;AAMA,sBAAO,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAE,cAASxB,IAAX;AAAiB,cAASQ,IAA1B;AAAgC,kBAAYG,QAA5C;AAAsD,iBAAWT;AAAjE,KAAzB;AAAA,cAAqGH,KAAK,CAAC+B;AAA3G;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CArBD;;GAAMhC,Q;;KAAAA,Q;AAsBN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\nimport * as constants from './constantFile.js'\r\nimport Web3 from 'web3';\r\nimport { ethers } from \"ethers\";\r\n\r\nimport complaintContract from './complaintContract.json';\r\n\r\nexport const context = React.createContext({});\r\n\r\n\r\n\r\nconst Provider = (props) => {\r\n\r\n    var [user, setUser] = useState(null);\r\n    var [balance, setBalance] = useState(null);\r\n    var [companies, setCompanies] = useState([]);\r\n\r\n    //Si todavia no se ha conectado con Metamask entonces aparece un popup para la conexion\r\n    const infuraUrl = constants.INFURA_URL;\r\n    //Crea una instancia para comunicarse con el nodo indicado\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(infuraUrl));\r\n    //Nos conectamos con el contrato\r\n    const contract = new web3.eth.Contract(complaintContract.abi, constants.CONTRACT_ADDRESS);\r\n    const provider = ethers.getDefaultProvider(\"rinkeby\");\r\n\r\n    useEffect(async () => {\r\n        await Promise.all([\r\n            axios.get(`${constants.SERVER_URL}/getuser`, { withCredentials : true})\r\n                .then((response) => {  setUser(response.data) }),\r\n            provider.getBalance(constants.ADDRESS2)\r\n                .then((response) => { setBalance(ethers.utils.formatEther(response))})])}, []);\r\n    return <context.Provider value={{ \"user\" : user, \"web3\" : web3, \"contract\": contract, \"balance\": balance}}>{props.children}</context.Provider>;\r\n}\r\nexport default Provider;"]},"metadata":{},"sourceType":"module"}